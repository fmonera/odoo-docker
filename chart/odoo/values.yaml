global:
  # If you will use a private registry to download the images, you
  # must set this to "true" and specify the name of the existing
  # secret in the same namespace containing the access credentials 
  # for the registry.
  privateRegistry:
    enabled: false
    secretName: regcred-example

app:
  # Number of replicas of the frontend. Requires all replicas (and sidekiq) to 
  # read and write to the same shared storage. So it requires a volume with RWX mode,
  # such as NFS, CephFS or longhorn (NFS based too).
  # Or you can run all replicas and sidekiq on the same node and use a local path
  # provisioner.
  replicas: 1
  
  # Full image path
  image: registry.example.com/charts/odoo
  targetRevision: 20230517
  imagePullPolicy: Always  
  
postgresql:
  # Default server 
  HOST: pg-db.pgo

  # DB port.
  PORT: 5432

  # Username
  USER: odoo

  # Password.
  PASSWORD: odoopass

environment:
  # Set timezone
  TZ: Europe/Madrid

  # SMTP
  SMTP_HOST: "email-smtp.us-east-1.amazonaws.com"
  SMTP_PORT: "485"
  SMTP_AUTHENTICATION: :login
  SMTP_USER_NAME: ""
  SMTP_DOMAIN: null
  SMTP_PASSWORD: ""
  SMTP_TLS: "true"
  SMTP_ENABLE_STARTTLS_AUTO: "true"
  SSL_OPENSSL_VERIFY_MODE: "false"

service:
  port: "8069"

persistence:
  files:
    # Set the name of the Persistent Volume Claim. In case you already have a PVC 
    # created, set the name of that PVC. Otherwise this is the name of the PVC that
    # will be created.
    claimName: files-pvc

    # Enable to use your already existing PVC. This way it will not create it's own
    # persistant volume.
    existingClaim: 
      enabled: false

    # In case you don't use an already existing claim, the following values will create
    # a volume for you.
  
    # Specify the storage class to create the PVC. Set empty to use the default storage
    # class configured in the cluster.
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    # storageClass: "-"

    # Access mode must be ReadWriteMany, unless you limit all the instances (including
    # sidekiq) to the same node.
    accessMode: ReadWriteMany

    # Size of the PVC
    size: 100Gi
  
  addons:
    # Set the name of the Persistent Volume Claim. In case you already have a PVC 
    # created, set the name of that PVC. Otherwise this is the name of the PVC that
    # will be created.
    claimName: addons-pvc

    # Enable to use your already existing PVC. This way it will not create it's own
    # persistant volume.
    existingClaim: 
      enabled: false

    # In case you don't use an already existing claim, the following values will create
    # a volume for you.
  
    # Specify the storage class to create the PVC. Set empty to use the default storage
    # class configured in the cluster.
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    # storageClass: "-"

    # Access mode must be ReadWriteMany, unless you limit all the instances (including
    # sidekiq) to the same node.
    accessMode: ReadWriteMany

    # Size of the PVC
    size: 10Gi

ingress:
  enabled: false

  # Set ingress annotations. Example:
  # annotations:
  #   cert-manager.io/cluster-issuer: issuer-cloudflare-prod
  annotations: {}

  # Ingress Class Name
  ingressClassName: nginx

  # Host name
  host: odoo.example.com

  # TLS Secret name
  tls:
    enabled: true
    secretName: odoo-tls-secret

